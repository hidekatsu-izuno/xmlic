{"name":"xmlic","tagline":"jQuery like DOM traversal and manipulation API","body":"# XMLIC - jQuery like DOM traversal and manipulation API\r\n\r\n## XMLIC（ズムリック）とは\r\n\r\njQuery ライクな DOM 操作を実現する Java 用 XML APIです。JDOM や XOM などと異なり、あくまで W3C 標準の DOM に対し検索、操作を行なうため、XSLT など他ライブラリとの高い相互運用性を実現出来ます。API は jQuery に似ていますが、XMLIC は XML の操作に特化しているため、次のような違いがあります。\r\n\r\n- CSS セレクタの代わりに XPath 1.0 および XPath パターンを使用します。\r\n- 複数ドキュメントを扱うことができます。入出力機能も用意されています。\r\n- XML名前空間を適切に扱うことができます。\r\n\r\n使い方は簡単です。jQuery 利用者ならば、すぐに使いはじめることができるでしょう。\r\n\r\n```java\r\nimport net.arnx.xmlic.XML;\r\n\r\n// test.xml を読み込んで div タグに class=\"alert\" という属性を設定します。\r\nXML.load(new File(\"test.xml\"))\r\n    .find(\"div\")\r\n    .attr(\"class\", \"alert\");\r\n```\r\n## 基本的な使い方\r\n\r\njQuery の Traversal/Manipulation API をそのままの仕様で移植していますので同じように操作が可能です。大きく違う点は、Document の取り回しです。 jQuery が単一の window.document に対して　XMLIC は複数のドキュメントを扱う必要があります。このような処理のためにXML クラスが用意されています（jQuery の $ 関数に当たるものだと考えるとわかりやすいでしょう）。\r\n\r\n- 読み込みには、 XML クラスの load() スタティックメソッドを使います。\r\n- 読み込んだ XML インスタンスに対し、find() メソッドで Nodes インスタンスを取得し操作します（Nodes インスタンスは jQuery オブジェクトに当たるものだと考えるとよいでしょう）。\r\n- XML インスタンス は、Nodes インスタンスの getOwner() メソッドを通じて取得できます。\r\n- 書き込みは、 XML インスタンスの writeTo() メソッドを使います。\r\n\r\nXPath は XSLT 1.0 パターンとして判定されます。そのため、子孫要素の div を捜すために find(\".//div\") のように記述する必要はなく、 find(\"div\") と書くことができます。\r\n\r\n## XML 文書の読み込み - Load\r\n\r\nXML 文書の読み込みには、２パターンが用意されています。通常は XML クラスの load スタティックメソッドを使います。オプションは指定出来ませんが、通常の利用では困ることはないでしょう。\r\n\r\n```java\r\n// ファイルから XML クラスのインスタンスを取得します。\r\nXML xml = XML.load(new File(\"test.xml\"));\r\n\r\n// InputStream から XML クラスのインスタンスを取得します。クローズは自動的に行われます。\r\nXML xml = XML.load(new FileInputStream(\"test.xml\"));\r\n\r\n// Reader から XML クラスのインスタンスを取得します。クローズは自動的に行われます。\r\nXML xml = XML.load(new FileReader(\"test.xml\"));\r\n\r\n// URI から XML クラスのインスタンスを取得します。\r\nXML xml = XML.load(new URI(\"http://...\"));\r\n```\r\n\r\n検証を行なう必要があるなど、オプションの指定が必要な場合は、XMLLoader （あるいは DocumentBuilder などを通じて）構築した Document オブジェクトを XML クラスのコンストラクタを使ってラップします。\r\n\r\n```java\r\n// XMLLoader から DOM を構築し、XML クラスでラップします。\r\nXMLLoader loader = new XMLLoader();\r\nloader.setValidation(true);\r\nloader.setIgnoringComments(true);\r\nXML xml = loader.load(new FileInputStream(new File(\"test.xml\")));\r\n```\r\n\r\n外部にあるドキュメントではなく、部分的な XML や DOM ノード値して構築されている場合は、 Nodes　コンストラクタを使って取り込みます。\r\n\r\n```java\r\n// 部分的な XML をインラインで読み込みます。\r\nNodes nodes = new Nodes(xml, \"<div>部分的なXML</div><div>部分的なXML</div>\");\r\n\r\n// 構築済みのノードを Nodes オブジェクトに変換します。\r\nNode node = ...;\r\nNodes nodes = new Nodes(xml, node);\r\n\r\nNodeList list = ...;\r\nNodes nodes = new Nodes(xml, list);\r\n```\r\n\r\n## DOM の検索 - Traversal\r\n\r\n### 要素の検索 - find\r\n\r\n要素の検索には find メソッドを使います。find メソッドは、XML クラス、Nodes クラスの両方で利用できます。引数には、XPath 式を記述します。\r\n\r\n```java\r\n// ドキュメントから div 要素を探し、さらに href 属性をもつ a 子要素を検索します。\r\nxml.find(\"div\").find(\"a[@href]\");\r\n```\r\n\r\n名前空間に対して検索する場合は、プレフィックスを付与します。デフォルトでルート要素に付与された名前空間情報は収集しますが、読み込んだドキュメントに依存するため、明示的に指定する方がよいでしょう。\r\n\r\n```java\r\n// XML インスタンスを構築し、利用する名前空間を指定します。\r\nXML xml = XML.load(new File(\"test.xml\"));\r\nxml.addNamespaceMapping(\"h\", \"http://www.w3.org/1999/xhtml\");\r\n\r\n// ドキュメントから xhtml の div 要素を探し、さらに href 属性をもつ xhtml の a 子要素を検索します。\r\n// 指定するプレフィックスは、ドキュメント内に実際に付与されたプレフィックスには依存しません。\r\nxml.find(\"h:div\").find(\"h:a[@href]\");\r\n```\r\n\r\n### ノードの検索 - select\r\n\r\nXPath は、要素以外にもテキストノードや属性ノード、コメントノードなども対象にすることができます。 XMLIC では、それに対応して jQuery にはない select メソッドを追加しています。select メソッドは、XML クラス、Nodes クラスの両方で利用できます。引数には、XPath 式を記述します。属性値の設定／取得には val メソッドを使います。\r\n\r\n```java\r\n// ドキュメントから最初の属性ノードを検索し、その値を取得します。\r\nxml.select(\"attribute::node()[1]\").val();\r\n```\r\n\r\njQuery では val メソッドは、入力タグに対する値を取得するメソッドとして用意されていますが、 XMLIC では、Node クラスの get/setNodeValue() に対するアクセッサとして機能します。\r\n\r\n### ノードの横断 - traverse\r\n\r\nDOM Level2 では、ノードを横断し列挙する機能が追加されましたが、XMLIC　にも対応する機能が用意されています。\r\n\r\n```java\r\n// ドキュメントからすべての要素にマッチするノードを順番に訪問します。\r\nxml.traverse(\"*\", new Visitor<Nodes>() {\r\n  public void visit(Nodes current, Status status) {\r\n  \tSystem.out.println(current.name());\r\n  }\r\n});\r\n\r\n// 第3引数を true にすることで逆順にたどることもできます\r\nxml.traverse(\"*\", new Visitor<Nodes>() {\r\n  public void visit(Nodes current, Status status) {\r\n  \tSystem.out.println(current.name());\r\n  }\r\n}, true);\r\n```\r\n\r\n### XPath と CSS セレクタとの比較\r\n\r\n主要な XPath 式と findなどで用いるXPath パターンとCSS セレクタの対比表を次に示します。参考にしてください。\r\n\r\n|対象          |XPath                                |XPath パターン                  |CSS セレクタ        |\r\n|--------------|-------------------------------------|--------------------------------|--------------------|\r\n|すべての要素  |.//\\*                                |\\*                              |\\*                  |\r\n|要素が一致    |.//element                           |element                         |element             |\r\n|子要素        |.//parent/child                      |parent/child                    |parent > child      |\r\n|子孫要素      |.//ancestor//descendant              |ancestor//descendant            |ancestor descendant |\r\n|属性がある    |.//\\*[@name]                         |\\*[@name]                       |[name]              |\r\n|属性が一致    |.//\\*[@name='value']                 |@name='value'                   |[name='value']      |\r\n|n番目の子要素 |.//\\*[n] あるいは .//*[position()=n] |\\*[n] あるいは \\*[position()=n] |:nth-child(n)       |\r\n|最初の子要素  |.//\\*[1]                             |\\*[1]                           |:first-child        |\r\n|最後の子要素  |.//\\*[last()]                        |\\*[last()]                      |:last-child         |\r\n|OR 条件選択   |expr \\| ... \\| expr                  |expr \\| ... \\| expr             |expr, ..., expr     |\r\n\r\njQueryでは #ID の形でID指定を多用しますが、XMLではスキーマにID型が指定されない限り利用できないため、通常の属性同様 @id='ID' と記述します （XPath にも ID 構文は存在しますが、スキーマを使い検証を実施し DOM 内に ID 型であるという情報が設定されている場合に限り、id()='ID' と書くことで検索が可能です）。\r\n\r\n### 子要素の取得 - children\r\n\r\n子要素の取得には、children メソッドを使います。引数に XPathのフィルタ条件（角カッコの中）を記載することでフィルタリングが可能です。\r\n\r\n```java\r\n// ドキュメントの中から div 要素を検索し、それらの要素に対する子要素の一覧を取得します。\r\nxml.find(\"div\").children();\r\n\r\n// ドキュメントの中から div 要素を検索し、span という名前を持つその子要素の一覧を取得します。\r\nxml.find(\"div\").children(\"span\");\r\n```\r\n\r\n### 親要素の取得 - parent, parents / parentsUntil, closest\r\n\r\n親要素の取得には、parent メソッドを使います。すべての親（＝先祖）要素を取得する場合は parents メソッドを使います。 引数に XPathのフィルタ条件（角カッコの中）を記載することでフィルタリングが可能です。\r\n\r\n```java\r\n// div 要素を検索し、それらの要素に対する親要素を取得します。\r\nxml.find(\"div\").parent();\r\n\r\n// div 要素を検索し、それらの要素にすべての親要素を取得します。\r\nxml.find(\"div\").parents();\r\n\r\n// フィルタリングも可能です。\r\nxml.find(\"div\").parent(\"@class='test'\");\r\nxml.find(\"div\").parents(\"@class='test'\");\r\n```\r\n\r\n条件に一致する親要素までを取得できる parentsUntil、自分も含むすべての親要素をから最初に条件に一致した要素を取得できる closest も同様に用意されています。\r\n\r\n```java\r\n//  div 要素を検索し、class=\"test\" を持つ要素までの親要素を取得します。\r\nxml.find(\"div\").parentsUntil(\"@class='test'\");\r\n\r\n//  div 要素の自分も含む上位要素の中から、最初に条件に一致する要素を取得します。\r\nxml.find(\"div\").closest(\"@class='test'\");\r\n```\r\n\r\n### 兄弟要素の取得 - prev / prevUntil / prevAll, next / nextUntil / nextAll, siblings\r\n\r\n兄弟要素の取得には、前にある要素を取得する prev 系メソッド、後にある要素を取得する next 系メソッド、前後両方の要素を取得する siblings メソッドがあります。\r\n\r\nprev 系メソッドには、直前を取得する同名メソッドの他に、前に位置する兄弟要素すべてを取得する prevAll、 条件に一致するまで前にさかのぼる prevUntil があります。\r\n\r\n```java\r\n// div 要素を検索し、それらの要素に対する直前の要素の一覧を取得します。\r\nxml.find(\"div\").prev();\r\n\r\n// div 要素を検索し、それらの要素に対して前にある要素すべての一覧を取得します。\r\nxml.find(\"div\").prevAll();\r\n\r\n// div 要素を検索し、それらの要素に対して条件に一致するまで前にある要素を取得します。\r\nxml.find(\"div\").prevUntil(\"@class='test'\");\r\n\r\n// フィルタリングも可能です。\r\nxml.find(\"div\").prev(\"@class='test'\");\r\nxml.find(\"div\").prevAll(\"@class='test'\");\r\n```\r\n\r\nnext 系メソッドも同様に、直後を取得する同名メソッドの他に、後ろに位置する兄弟要素すべてを取得する nextAll、 条件に一致するまで後ろに進む nextUntil があります。\r\n\r\n```java\r\n// div 要素を検索し、それらの要素に対する直後の要素の一覧を取得します。\r\nxml.find(\"div\").next();\r\n\r\n// div 要素を検索し、それらの要素に対して後ろにある要素すべての一覧を取得します。\r\nxml.find(\"div\").nextAll();\r\n\r\n// div 要素を検索し、それらの要素に対して条件に一致するまで後ろにある要素を取得します。\r\nxml.find(\"div\").nextUntil(\"@class='test'\");\r\n\r\n// フィルタリングも可能です。\r\nxml.find(\"div\").next(\"@class='test'\");\r\nxml.find(\"div\").nextAll(\"@class='test'\");\r\n```\r\n\r\nsiblingsは、すべての兄弟要素を取得するメソッドで prevAll と nextAll を結合したような効果を持ちます。\r\n\r\n```java\r\n// div 要素を検索し、それらの要素に対するすべての兄弟要素を取得します。\r\nxml.find(\"div\").siblings();\r\n\r\n// フィルタリングも可能です。\r\nxml.find(\"div\").siblings(\"@class='test'\");\r\n```\r\n\r\n### 子ノードの取得 - contents\r\n\r\n子要素を取得するには、children メソッドを使いますが、テキストノードなどは除外されます。テキストノードやコメントノードなどすべての子ノードを取得する場合には、 contents メソッドを使います。\r\n\r\n```java\r\n// div 要素を検索し、それらの要素に対するすべての子ノードを取得します。\r\nxml.find(\"div\").contents();\r\n\r\n// フィルタリングも可能です。\r\nxml.find(\"div\").contents(\"first()\");\r\n```\r\n\r\n### 取得結果の操作 - filter / not, eq　/ first / last　/ slice\r\n\r\n取得結果をフィルタリングしたい場合は、filter メソッドを使います。filterメソッドには、XPath 式によるフィルタと、内部クラスを用いた２種類が用意されています。not メソッドは、filter とは逆に条件にマッチしないものだけを残します。\r\n\r\n```java\r\n// div 要素を検索した結果に対し属性でフィルタリングします。\r\nxml.find(\"div\").filter(\"@name='test'\");\r\n\r\n// div 要素を検索した結果に対し条件にマッチしないものだけ残します。\r\nxml.find(\"div\").not(\"@name='test'\");\r\n\r\n// div 要素を検索した結果に対しメソッドを使って属性ででフィルタリングします。\r\nxml.find(\"div\").filter(new Visitor() {\r\n\tpublic boolean visit(Node node) {\r\n\t\treturn \"test\".equals(node.getAttributeNS(null, \"name\"));\r\n\t}\r\n});\r\n```\r\n\r\nまた、位置によるフィルタリングとして eq、first、lastの３メソッドが、位置範囲に 対するフィルタとして slice が用意されています。なお、first、last メソッドは、 それぞれ eq(0)、eq(-1) のショートカットです。\r\n\r\n```java\r\n// div 要素を検索した結果の3番目を取得します。\r\nxml.find(\"div\").eq(3);\r\n\r\n// div 要素を検索した結果の2～4番目を取得します。\r\nxml.find(\"div\").slice(2, 4);\r\n```\r\n\r\njQuery の :first、:last とは異なり、XMLIC には結果集合それ自体に対して フィルタリングする XPath 式がないがめ、常にfirst()、last()を使う必要があることに注意して ください。\r\n\r\n### 取得結果の結合 - add, addBack\r\n\r\n取得結果に対し、別の検索結果を結合したい場合は、add メソッドを使います。一つ前の処理結果を現在の結果に結合したい場合は、 addBack　を使います。\r\n\r\n```java\r\n// div 要素を検索した結果に p 要素を検索した結果を結合します。なお、次の二つの表現は等価です。\r\nxml.find(\"div\").add(\"p\");\r\nxml.find(\"div\").add(xml.find(\"p\"));\r\n\r\n// div 要素の子要素  p を検索した結果に 最初の div 要素の検索結果を結合します。フィルタリングも可能です。\r\nxml.find(\"div\").find(\"p\").addBack();\r\n```\r\n\r\n### 取得結果の復元 - end\r\n\r\n一つ前の取得結果に戻したい場合は、 end メソッドを使います。このメソッドを使うことでメソッド連結でも入れ子表現が可能になります。\r\n\r\n```java\r\n// div 要素を検索した結果に p 要素を検索した結果を結合した後、最初の検索結果を取得します。\r\nxml.find(\"div\")\r\n  .find(\"p\")\r\n.end();\r\nxml.find(\"div\").find(\"p\").addBack(\"@name='test'\");\r\n```\r\n\r\n### 取得結果の列挙 - each\r\n\r\nNodes クラスは、ArrayList<Node> を継承しているため、通常のリストと同様、for 文による列挙が可能です。\r\n\r\n```java\r\n// 取得結果を列挙します。\r\nfor (Node node : xml.find(\"div\")) {\r\n  Nodes current = new Nodes(xml, node);\r\n  System.out.println(current.name());\r\n}\r\n```\r\njQuery 同様に each メソッドによる列挙も可能です。ただし、 jQuery とはシンタックスが異なる点に注意が必要です。\r\n\r\n```java\r\n// 取得結果を列挙します。\r\nxml.find(\"div\").each(new Visitor<Nodes>() {\r\n  public void visit(Nodes current, Status status) {\r\n    System.out.println(\"\" + status.getIndex() + \": \" + current.name());\r\n  }\r\n});\r\n\r\n// 第ニ引数に true を設定することで、逆順の列挙も可能です。\r\nxml.find(\"div\").each(new Visitor<Nodes>() {\r\n  public void visit(Nodes current, Status status) {\r\n    System.out.println(\"\" + status.getIndex() + \": \" + current.name());\r\n  }\r\n}, true);\r\n\r\n// 途中で break したい場合は cancel メソッドを使ってください。キャンセル例外が発生して処理を中断します。\r\nxml.find(\"div\").each(new Visitor<Nodes>() {\r\n  public void visit(Nodes current, Status status) {\r\n    if (status.getIndex() == 3) status.cancel();\r\n    System.out.println(\"\" + status.getIndex() + \": \" + current.name());\r\n  }\r\n});\r\n```\r\n\r\n## DOM の操作 - Manipulation\r\n\r\n###名前の操作 - name, namespace, prefix, localName\r\n\r\nXML と HTML の大きな違いとして名前空間のサポートがあります。仕様としては自然なものですが XML の利用において最大の難物とも言えます。 まず、XML における名前の概念を整理すると次のようになります。なお、属性については、プレフィックスを付けない場合、名前空間はデフォルト名前空間 ではなく、要素の名前空間に属します。\r\n\r\n|概念                    |説明                                 |例                           |\r\n|------------------------|-------------------------------------|-----------------------------|\r\n|名前空間(Namespace URI) |タグセットの仕様を表す URI           |http://www.w3.org/1999/xhtml |\r\n|プレフィックス(Prefix)  |文書中での名前空間に対する短縮名     |任意（hなど）                |\r\n|ローカル名(Local Name)  |タグの要素や属性の名前               |div、span など               |\r\n|修飾された名前（QName） |プレフィックスで修飾されたローカル名 |h:div、h:span など           |\r\n\r\n名前空間導入以前の XML における名前やいわゆる タグ名（tagName）は、デフォルト名前空間で修飾された名前として扱われます。\r\n\r\njQuery には名前の操作機能がありませんが、XMLIC では、名前空間、プレフィックス、ローカル名、修飾された名前それぞれに対し namespace、prefix、localName、name メソッドでアクセスすることができます（複数のノードが含まれる場合は、先頭ノードの情報が返されます）。\r\n\r\n```java\r\nNodes nodes = xml.parse(\"<h:div xmlns:h=\\\"http://www.w3.org/1999/xhtml\\\">テスト</h:div>\");\r\nnodes.namespace(); // http://www.w3.org/1999/xhtml\r\nnodes.prefix(); // h\r\nnodes.localName(); // div\r\nnodes.name(); // h:div\r\n```\r\n\r\n変更する場合も、引数に値を設定するだけです。\r\n\r\n```java\r\nNodes nodes = xml.parse(\"<h:div xmlns:h=\\\"http://www.w3.org/1999/xhtml\\\">テスト</h:div>\");\r\n// プレフィックスは、文書中直近に指定されているものになります。存在しないときのみ、引数で指定したプレフィックスとなります。\r\nnodes.namespace(\"http://www.w3.org/2000/svg\");　// デフォルトに戻す場合は、null を設定します。\r\nnodes.prefix(\"svg\"); // プレフィックスのみを変更します（名前空間は変わりません）\r\nnodes.localName(\"span\"); // ローカル名のみを変更します（名前空間は変わりません）\r\n\r\n// XML 構築時に設定したプレフィクスで指定します。実際のプレフィックスは、文書中直近に指定されているものになります。\r\n// 存在しないときのみ、引数で指定したプレフィックスとなります。\r\nnodes.name(\"svg:span\"); // svg　に紐づく名前空間と span というローカル名に変更されます。\r\n```\r\n\r\n名前空間については removeNamespace メソッドを使うことで削除することも可能です。\r\n\r\n```java\r\nNodes nodes = xml.parse(\"<h:div xmlns:h=\\\"http://www.w3.org/1999/xhtml\\\">テスト</h:div>\");\r\n// ネームスペースを削除します。\r\nnodes.removeNamespace();\r\n\r\n// 特定のネームスペースだけを削除することもできます。\r\nnodes.removeNamespace(\"http://www.w3.org/1999/xhtml\");\r\n```\r\n\r\n### 属性の操作\r\n\r\n属性の操作は、attr メソッドを通じて行います。このメソッドも、名前同様に名前空間を考慮して操作することが可能です。\r\n\r\n```java\r\nnodes.attr(\"name\"); // 属性の値を取得します。\r\nnodes.attr(\"name\", \"1\") // 属性の値を設定します。\r\n\r\n// 名前空間の取り扱いも可能です。XML 構築時に設定したプレフィクスで指定します。\r\nnodes.attr(\"http:name\"); // 名前空間付きの属性の値を取得します。\r\n\r\n// XML 構築時に設定したプレフィクスで指定します。属性が追加される場合、実際のプレフィックスは、文書中直近に指定されているものになります。\r\n// 存在しないときのみ、引数で指定したプレフィックスとなります。\r\nnodes.attr(\"http:name\", \"1\") // 名前空間を使って、属性を設定します。\r\n```\r\n\r\n### テキスト／値の操作\r\n\r\n要素の子要素となっているテキストの操作には、text メソッドを使用します。\r\n\r\n```java\r\n// 子ノード（以下）に含まれるテキストを結合して返されます。\r\nnodes.text();\r\n\r\n// 子ノードをテキストで置換します。\r\nnodes.text(\"text\");\r\n```\r\n\r\nXPath では、要素以外のノードについても検索が可能なため、属性やコメントなど要素以外のノード値を操作する方法が用意されています。 具体的には val メソッドを使います。jQuery にも val メソッドがありますが、異なる動作をしますので 注意してください（将来的には、input など同名の要素に対して同じ動作を実装することも検討しています。現在は要素に対しては何の動作もしません）。\r\n\r\n```java\r\n// div　要素以下の最初のノードの値を取得します。\r\nxml.find(\"div\").contents().val();\r\n\r\n// div　要素以下の各種ノードの値を設定します。\r\nxml.find(\"div\").contents().val(\"text\");\r\n```\r\n\r\n### 要素の評価 - is, index\r\n\r\n要素が条件に一致するか調べたい場合には、is メソッドを使います。条件に一致するインデックス番号を取得したい場合には、indexメソッドを使います。\r\n\r\n```java\r\n// すべての div 要素に属性 name=\"test\"が存在する場合 true になります。\r\nboolean result = xml.find(\"div\").is(\"@name='test'\");\r\n\r\n// div で最初に条件が一致したインデックス番号を返します。 見つからない場合は -1 を返します。\r\nint index = xml.find(\"div\").index(\"@name='test'\");\r\n\r\n// フィルタの代わりに、Node を指定することもできます。\r\nNode node = xml.find('div').first().get(0);\r\nboolean result = xml.find(\"div\").is(node);\r\nint index = xml.find(\"div\").index(node);\r\n```\r\n\r\n### 要素の追加 - prepend / prependTo, append / appendTo, before / insertBefore, after / insertAfter\r\n\r\n要素を追加したい場合は、prepend系、append系、before系、after 系の各メソッドを使います。 これらのメソッドは、それぞれ挿入位置が違うだけで、同じような使い方ができます。\r\n\r\nprepend、append、before、after と prependTo、appendTo、insertBefore、insertAfter の違いは、前者がオブジェクトの要素群に引数で指定した要素群を加えるのに対し、後者は、引数で指定した要素群にオブジェクトの要素群を加える点にあります（対象が逆になる）。\r\n\r\n```java\r\n// すべての div 要素に指定した要素を追加します。\r\nxml.find(\"div\").prepend(\"<span>最初の子要素として追加！</span>\");\r\nxml.find(\"div\").append(\"<span>最後の子要素として追加！</span>\");\r\nxml.find(\"div\").before(\"<span>直前の要素として追加！</span>\");\r\nxml.find(\"div\").after(\"<span>直後の要素として追加！</span>\");\r\n\r\n// 同じ結果になりますが記述が逆転します。\r\nxml.parse(\"<span>最初の子要素として追加！</span>\").prependTo(\"div\");\r\nxml.parse(\"<span>最後の子要素として追加！</span>\").appendTo(\"div\");\r\nxml.parse(\"<span>直前の要素として追加！</span>\").insertBefore(\"div\");\r\nxml.parse(\"<span>直後の要素として追加！</span>\").insertAfter(\"div\");\r\n```\r\n\r\n### 要素の置換 - replaceWith / replaceAll\r\n\r\n要素の置換には、replaceWith メソッドと replaceAll メソッドを使います。ふたつのメソッドの違いは、要素の追加と同様に置換対象と置換内容の記述位置だけです。\r\n\r\n```java\r\n// すべての div 要素を指定した要素で置換します。\r\nxml.find(\"div\").replaceWith(\"<span>最初の子要素として追加！</span>\");\r\n\r\n// 同じ結果になりますが記述が逆転します。\r\nxml.parse(\"<span>最初の子要素として追加！</span>\").replaceAll(\"//div\");\r\n```\r\n\r\n### 要素のラッピング - wrap / wrapInner / wrapAll / unwrap\r\n\r\n要素のラッピングには、wrap 系メソッドを使います。wrap は要素自身を、wrapInner は要素の内側をラッピングします。 unwrap は wrap とは反対にラッピングを解除し、子要素で置換します。\r\n\r\n```java\r\n// すべての div 要素を指定した要素でラップします。\r\nxml.find(\"div\").wrap(\"<div class=\".wrap\"></div>\"); // ><の間に要素が挿入されます。\r\nxml.find(\"div\").unwrap(); // すべての div 要素のラッピングを解除します。\r\n\r\n// すべての div 要素の内側を指定した要素でラップします。\r\nxml.find(\"div\").wrapInner(\"<div class=\".wrap\"></div>\");\r\nwrapAll は、対象となる要素の最初の位置に対象のすべての要素を包み込むようにラッピングします。\r\n\r\n// 最初の div 要素の位置にすべての div 要素がラッピングされるように移動されます。\r\nxml.find(\"div\").wrapInner(\"<div class=\".wrap\"></div>\");\r\n```\r\n\r\n### 要素の削除 - remove, empty\r\n\r\n要素を削除するメソッドとしては、要素自身を含めて削除する remove メソッドと要素の内側を削除する empty メソッドがあります。\r\n\r\n```java\r\n// すべての div 要素を削除します。\r\nxml.find(\"div\").remove();\r\nxml.find(\"div\").remove(\"span\"); // マッチした要素だけを削除することも可能です。\r\n\r\n// すべての div 要素を空（＝内側を削除）にします。\r\nxml.find(\"div\").empty();\r\n```\r\n\r\n### ノードの複製 - clone\r\n\r\nノードを複製したい場合は、clone メソッドを使用します。\r\n\r\n```java\r\nNodes clone = xml.find(\"div\").clone();\r\n```\r\n\r\n### ノードの評価 - evaluate\r\n\r\nXPath では、ノードの選択の他に文字列/数値/真偽値の結果を返す場合があります。XMLIC には、そのような場合にも対応できるように、evaluate という汎用の XPath 評価メソッドを用意しています。引数には、 xpath と戻り値の型を指定します。型には、Nodes、NodeList、 Node、String、Boolean / boolean、各種数値型（Numberのサブクラス） を指定することができます。\r\n\r\n```java\r\nif (nodes.evaluate(\"self::node()[@name='test']\", boolean.class)) {\r\n  // マッチした！\r\n}\r\n```\r\n\r\n### ノードの正規化 - normalize\r\n\r\nnormalize メソッドは、ノードの正規化を行います。具体的には、子要素より下にあるテキストノードを結合してひとつのノードにまとめます。これは、Node クラスの normalize の動作と同じですが、XMLIC ではこの動作に加え、不用な名前空間宣言の除去も行います。\r\n\r\n```java\r\nnodes.normalize();\r\n```\r\n\r\n### データの紐付け - data/removeData\r\n\r\nDOM の属性などにはしたくないが、特定のノードとオブジェクトを紐付けておきたい場合には Data APIを利用します。\r\n\r\n```java\r\n// ノードにオブジェクトを紐付けます。\r\nnodes.data(\"key\", \"value\");\r\n\r\n// ノードからオブジェクトを取得します。\r\nObject value = nodes.data(\"key\");\r\n\r\n// ノードからオブジェクトを削除します。\r\nnodes.removeData(\"key\");\r\n```\r\n\r\nなお、jQuery同様「data-名前」という属性がある場合には、Data API から取得できるデフォルト値として扱います。\r\n\r\n### HTML互換機能 - addClass/toggleClass/removeClass/hasClass, css\r\n\r\nXMLIC は XML を対象としていますが、XHTML での操作時に便利なように次の jQuery ライクな HTML 互換操作機能を用意しています。\r\n\r\n- addClass、removeClass はそれぞれ要素の class 属性の空白文字で区切られたリストに文字列を追加／削除します。\r\n- toggleClass は、フラグにより要素の追加、削除を入れ替えます。\r\n- hasClass は、要素の class 属性の空白文字で区切られたリストに指定した文字列が含まれているかを確認します。\r\n\r\n```java\r\n// クラスを追加します。複数追加するときは空白で区切ります。\r\nnodes.addClass(\"warning error\");\r\n\r\n// クラスを削除します\r\nnodes.removeClass(\"warning\");\r\n\r\n// クラスを入れ替えます。\r\nnodes.removeClass(\"warning\", warning != null);\r\n\r\n// クラスが存在しているかチェックします。\r\nif (nodes.hasClass(\"error\")) {\r\n    System.out.println(\"エラーはまだ存在しています。\");\r\n}\r\n```\r\n\r\ncss メソッドは、要素の style 属性に対し CSSスタイルを取得／追加／削除します。jQuery とは異なり、link要素やstyle要素で指定されたスタイル情報ができるわけではないので、注意してください。\r\n\r\n## XML 文書の出力 - Write\r\n\r\nXML 文書の出力も読み込み同様に２パターンが用意されています。通常は XML クラスの writeTo メソッドを使います。オプションは指定出来ませんが、通常の利用には十分でしょう。\r\n\r\n```java\r\n// ファイルに  DOM の内容を出力します。\r\nxml.writeTo(new File(\"test.xml\"));\r\n\r\n// OutputStream に  DOM の内容を出力します。クローズは自動的に行われます。\r\nxml.writeTo(new FileOutputStream(\"test.xml\"));\r\n\r\n// Writer に DOM の内容を出力します。クローズは自動的に行われます。\r\nxml.writeTo(new OutputStreamWriter(new FileOutputStream(\"test.xml\"), \"Windows-31J\"));\r\n```\r\n\r\n改行コードの変更などオプションの指定が必要な場合は、XMLWriter を使います。\r\n\r\n```java\r\n// DOM を XMLWrite に渡しファイルに出力します。\r\nXMLWriter writer = new XMLWriter();\r\nwriter.setEncoding(\"EUC-JP\");\r\nwriter.setLineSeparator(\"\\r\\n\");\r\nwriter.setPrettyPrinting(true);\r\n\r\nwriter.writeTo(new FileOutputStream(\"test.xml\"), xml);\r\n```\r\n\r\n部分的な XML を出力したい場合は、toString でも取得出来ます。\r\n\r\n## Mavenリポジトリ\r\n\r\nXMLIC は、0.9.1 以降 Maven Central Repository に登録されるようになりました。groupId、artifactIdは次の通りです。\r\n\r\n```xml\r\n<groupId>net.arnx</groupId>\r\n<artifactId>xmlic</artifactId>\r\n```\r\n\r\n## ライセンス\r\nXMLIC は、Apache License, Version 2.0下で配布します。\r\n\r\n自分のライブラリへの組み込んでいただいたり、その際にパッケージ名の変更や処理の変更など行っていただいても何ら構いません。ライセンスの範囲内でご自由にお使いください。\r\n\r\nなお、 XMLIC は jaxen をパッケージを変更し同梱しています。その部分に関しては jaxen のライセンスに従ってください（Apache ライセンスに準じた緩いライセンスとなっていますので、特別な考慮は必要はありません）。\r\n\r\n## リリースノート\r\n\r\n### 2014/3/1 version 1.0.2\r\n\r\n- Nodes クラスに JavaScript 互換の reverse() メソッドを追加しました。\r\n- Nodes クラスに jQuery 同様の addClass/toggleClass/removeClass/hasClass, css を追加しました。\r\n\r\n### 2013/11/8 version 1.0.1\r\n\r\n- Nodes クラスに owner() メソッドを追加するとともに、getOwner() メソッドを非推奨にしました 。\r\n- Nodes クラスに jQuery 同様の Data API を追加しました。\r\n- Nodes クラスにて別のドキュメントの要素を append/prepend/before/after した際、エラーが発生していた問題を修正しました。\r\n\r\n### 2013/9/18 version 1.0.0\r\n\r\n- XML や XSLT のロード時に発生する例外を XMLException に統一しました。個々のエラーにもアクセスすることができます。XML　や XMLException の getWarnings() メソッドを通じて警告にもアクセスできます。\r\n- XSLT を取り扱う XSLT クラスを追加しました。\r\n- XMLLoader#load の戻り値を Document から XML クラスに変更しました。\r\n- XMLWriter#writeTo に XML クラスを引数にとるメソッドを追加しました。\r\n- XML#parse を廃止し、 new Nodes(XML, String) コンストラクタに変更しました。\r\n\r\n### 2013/8/25 version 0.9.2\r\n\r\n- ロード時の名前空間走査処理をルートノードだけに限定しました。\r\n- デフォルト名前空間が指定された場合の XPath 式の取り扱いを XSLT2.0 の xpath-default-namespace 属性設定に合わせました。\r\n- HTML 互換機能として addClass, css メソッドを追加しました。\r\n- 各クラス／メソッドにコメントを追加しました。\r\n- StatusImpl を internal パッケージに移動しました。\r\n\r\n### 2013/8/17 version 0.9.1\r\n\r\n- each、filter など繰り返し処理の引数インターフェイスを Java で利用しやすいように見直しました。\r\n- DOM2 Traversal API に対応した traverse メソッドを追加しました。\r\n\r\n### 2013/8/8 version 0.9.0\r\n\r\n- XPath 式として XSLT 1.0 パターンを使うように変更しました。これにより .// のような記述が必要なくなり、より jQuery に近い書き方が可能になりました。 ただし、 select/evaluate は従来通り通常の XPath として解釈します。\r\n- 空のドキュメントに append できない不具合を修正しました。また、XMLクラスに XML文字列を指定できるコンストラクタを追加しました。\r\n- XMLエスケープ用に XML.escape(str)/XML.unescape(str) を追加しました。\r\n- XPath 関数として XSLT 同様の動作をする key() 関数を追加しました。\r\n\r\n### 2013/8/3 version 0.8.2\r\n\r\n- XPath API の動作が導入するライブラリによって結構異なることがわかったので　jaxen を統合しました（jar 内にパッケージを変更して入れたので、他に jar を追加する必要はありません）。\r\n- サンプルで　//foo となっていた部分を .//foo に修正しました。\r\n- Translater は Mapper に名前を変更するとともに、Nodes を取得するように変更しました。\r\n- XML.load で読み込んだ時にネームスペースマッピングを変更する方法がなかった問題を改善しました。\r\n- XPath 関数としてXSLT同様の動作をする document() と current() を追加しました。\r\n\r\n### 2013/7/16 version 0.8.1\r\n\r\n- 命名や動作が一貫していなかった点をいろいろ修正しました。\r\n- デフォルト名前空間の NamespaceContext での扱いが不適切でしたので修正しました。\r\n- ドキュメントを拡充しました。\r\n\r\n### 2013/7/16 version 0.8.0\r\n\r\n- XMLIC 最初のリリースとなります。元となる仕様が jQuery API ですので大きな変更は予定していませんが、1.0 までは不具合、要望など積極的に取り入れたいと思いますので、ご要望あれば是非。\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}